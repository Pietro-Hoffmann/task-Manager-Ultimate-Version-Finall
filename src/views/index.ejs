<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .completed {
      text-decoration: line-through;
      color: #6c757d;
    }
    /* a */
    .overdue {
      color: #dc3545;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container py-4">
    <h1 class="mb-4"><%= title %></h1>
    
    
    <div class="card mb-4">
      <div class="card-header">
        <h5>Nova Tarefa</h5>
      </div>
      <div class="card-body">
        <form id="taskForm">
          <div class="mb-3">
            <label for="taskName" class="form-label">Nome</label>
            <input type="text" class="form-control" id="taskName" required>
          </div>
          <div class="mb-3">
            <label for="taskDescription" class="form-label">Descrição</label>
            <textarea class="form-control" id="taskDescription" rows="2"></textarea>
          </div>
          <div class="mb-3">
            <label for="taskDueDate" class="form-label">Data de Prazo</label>
            <input type="date" class="form-control" id="taskDueDate" required>
          </div>
          <button type="submit" class="btn btn-primary">Adicionar Tarefa</button>
        </form>
      </div>
    </div>
    
    
    <div class="card mb-4">
      <div class="card-header">
        <h5>Filtrar Tarefas</h5>
      </div>
      <div class="card-body">
        <div class="btn-group" role="group">
          <button type="button" class="btn btn-outline-secondary filter-btn <%= activeFilter === 'all' ? 'active' : '' %>" data-filter="all">Todas</button>
          <button type="button" class="btn btn-outline-secondary filter-btn <%= activeFilter === 'pending' ? 'active' : '' %>" data-filter="pending">Pendentes</button>
          <button type="button" class="btn btn-outline-secondary filter-btn <%= activeFilter === 'completed' ? 'active' : '' %>" data-filter="completed">Concluídas</button>
          <button type="button" class="btn btn-outline-danger filter-btn <%= activeFilter === 'overdue' ? 'active' : '' %>" data-filter="overdue">Em Atraso</button>
        </div>
      </div>
    </div>
    
    
    <div class="card">
      <div class="card-header">
        <h5>Minhas Tarefas</h5>
      </div>
      <div class="card-body">
        <ul id="taskList" class="list-group">
          <% if (tasks.length === 0) { %>
            <li class="list-group-item">Nenhuma tarefa encontrada.</li>
          <% } else { %>
            <% tasks.forEach(task => { %>
              <li class="list-group-item task-item <%= task.completed ? 'completed' : '' %> <%= (!task.completed && new Date(task.dueDate) < new Date()) ? 'overdue' : '' %>" data-id="<%= task.id %>">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <h5><%= task.name %></h5>
                    <p><%= task.description %></p>
                    <small>Prazo: <%= new Date(task.dueDate).toLocaleDateString('pt-BR') %></small>
                  </div>
                  <div>
                    <% if (!task.completed) { %>
                      <button class="btn btn-sm btn-success complete-btn">Concluir</button>
                      <button class="btn btn-sm btn-warning edit-btn">Editar</button>
                    <% } %>
                    <button class="btn btn-sm btn-danger delete-btn">Excluir</button>
                  </div>
                </div>
              </li>
            <% }); %>
          <% } %>
        </ul>
      </div>
    </div>
  </div>

  
  <div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editTaskModalLabel">Editar Tarefa</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
        </div>
        <div class="modal-body">
          <form id="editTaskForm">
            <input type="hidden" id="editTaskId">
            <div class="mb-3">
              <label for="editTaskName" class="form-label">Nome</label>
              <input type="text" class="form-control" id="editTaskName" required>
            </div>
            <div class="mb-3">
              <label for="editTaskDescription" class="form-label">Descrição</label>
              <textarea class="form-control" id="editTaskDescription" rows="2"></textarea>
            </div>
            <div class="mb-3">
              <label for="editTaskDueDate" class="form-label">Data de Prazo</label>
              <input type="date" class="form-control" id="editTaskDueDate" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="button" class="btn btn-primary" id="saveEditBtn">Salvar Alterações</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      
      const editModal = new bootstrap.Modal(document.getElementById('editTaskModal'));
      
      
      document.getElementById('taskForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const name = document.getElementById('taskName').value;
        const description = document.getElementById('taskDescription').value;
        const dueDate = document.getElementById('taskDueDate').value;
        
        try {
          const response = await fetch('/api/tasks', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, description, dueDate })
          });
          
          if (!response.ok) throw new Error('Erro ao criar tarefa');
          
         
          window.location.reload();
        } catch (error) {
          console.error('Erro:', error);
          alert('Não foi possível adicionar a tarefa');
        }
      });
      
      
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const filter = this.getAttribute('data-filter');
          window.location.href = `/?filter=${filter}`;
        });
      });
      
      
      document.querySelectorAll('.complete-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          const taskId = this.closest('.task-item').getAttribute('data-id');
          
          try {
            const response = await fetch(`/api/tasks/${taskId}/complete`, {
              method: 'PATCH'
            });
            
            if (!response.ok) throw new Error('Erro ao completar tarefa');
            
            window.location.reload();
          } catch (error) {
            console.error('Erro:', error);
            alert('Não foi possível completar a tarefa');
          }
        });
      });
      
      
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          if (!confirm('Tem certeza que deseja excluir esta tarefa?')) return;
          
          const taskId = this.closest('.task-item').getAttribute('data-id');
          
          try {
            const response = await fetch(`/api/tasks/${taskId}`, {
              method: 'DELETE'
            });
            
            if (!response.ok) throw new Error('Erro ao excluir tarefa');
            
            window.location.reload();
          } catch (error) {
            console.error('Erro:', error);
            alert('Não foi possível excluir a tarefa');
          }
        });
      });
      
      
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
          const taskItem = this.closest('.task-item');
          const taskId = taskItem.getAttribute('data-id');
          
          try {
            const response = await fetch(`/api/tasks/${taskId}`);
            
            if (!response.ok) throw new Error('Erro ao buscar detalhes da tarefa');
            
            const task = await response.json();
            
            
            document.getElementById('editTaskId').value = task.id;
            document.getElementById('editTaskName').value = task.name;
            document.getElementById('editTaskDescription').value = task.description || '';
            
           
            const dueDate = new Date(task.dueDate);
            const formattedDate = dueDate.toISOString().split('T')[0];
            document.getElementById('editTaskDueDate').value = formattedDate;
            
           
            editModal.show();
          } catch (error) {
            console.error('Erro:', error);
            alert('Não foi possível carregar os detalhes da tarefa');
          }
        });
      });
      
     
      document.getElementById('saveEditBtn').addEventListener('click', async function() {
        const taskId = document.getElementById('editTaskId').value;
        const name = document.getElementById('editTaskName').value;
        const description = document.getElementById('editTaskDescription').value;
        const dueDate = document.getElementById('editTaskDueDate').value;
        
        if (!name || !dueDate) {
          alert('Nome e data de vencimento são obrigatórios');
          return;
        }
        
        try {
          const response = await fetch(`/api/tasks/${taskId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name, description, dueDate })
          });
          
          if (!response.ok) throw new Error('Erro ao atualizar tarefa');
          
          
          editModal.hide();
          window.location.reload();
        } catch (error) {
          console.error('Erro:', error);
          alert('Não foi possível atualizar a tarefa');
        }
      });
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>